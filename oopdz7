
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp4
{
    class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            Supermarket supermarket = new Supermarket(random);
            bool isWork = true;

            while (isWork)
            {
                supermarket.ShowInfo();

                switch (Console.ReadLine())
                {
                    case "1":
                        supermarket.SellProducts();
                        break;
                    case "2":
                        supermarket.ShowBasket();
                        break;
                    case "3":
                        supermarket.DeliteProduct();
                        break;
                    case "4":
                        isWork = false;
                        break;
                    default:
                        break;
                }
                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    class Supermarket
    {
        private int _countClients;
        private int _numberClient;
        private Random _random;
        private Queue<Client> _clients;

        public int Money { get; private set; }

        public Supermarket(Random random)
        {
            _random = random;
            _countClients = _random.Next(5, 11);
            _numberClient = 1;
            Money = 0;
            _clients = new Queue<Client>(_countClients);
            CreateQueue();
        }

        private void CreateQueue()
        {
            for (int i = 0; i < _countClients; i++)
            {
                _clients.Enqueue(new Client(i + 1, _random));
            }
        }
        public void ShowInfo()
        {
            Console.WriteLine($"В супермаркете перед кассой очеред из {_clients.Count} людей. \nВ кассе магазина денег {Money}\n" +
            $"Перед вами клиент номер {_numberClient}: \n1. Пробить товары \n2. Посмотреть корзину клиента \n3. Убрать один продукт" +
            $"\n4. Уволиться и закрыть магазин, решив стать программистом");
        }

        public void ShowBasket() 
        {
            if (_countClients>=1)
                _clients.Peek().ShowBasket();
            else
                Console.WriteLine("Клиентов нет как и корзин");
        }

        public void SellProducts()
        {
            if (_countClients>=1)
            {
                if (_clients.Peek().TryToPay())
                {
                    Console.WriteLine("Клиент заплатил деньги и ушел.");
                    Money += _clients.Peek().ToPay();
                    _clients.Dequeue();
                    _numberClient += 1;
                    _countClients -= 1;
                }
            }
            else
                Console.WriteLine("Клиентов нет");
        }

        public void DeliteProduct()
        {
            if (_countClients>=1)
                _clients.Peek().DeleteProduct();
            else
                Console.WriteLine("Корзин нет и удалать нечего");
        }
    }

    class Client
    {
        private int _money;
        private int _countProducts;
        private int _costAllProducts;
        private List<Product> _basket;
        private Random _random;

        public int Number { get; private set; }

        public Client(int number, Random random)
        {
            _random = random;
            Number = number;
            _money = _random.Next(400, 1000);
            _countProducts = _random.Next(5, 11);
            _basket = new List<Product>(_countProducts);
            CreateBasket();
        }

        public void DeleteProduct()
        {
            _basket.RemoveAt(_basket.Count - 1);
            _costAllProducts = 0;
            _countProducts -= 1;
            for (int i = 0; i < _countProducts; i++)
            {
                _costAllProducts += _basket[i].Cost;
            }
        }

        public int ToPay()
        {
            _money -= _costAllProducts;
            return _costAllProducts;
        }

        public bool TryToPay()
        {
            if (_money >= _costAllProducts)
                return true;
            else
            {
                Console.WriteLine("У клиента не хватает денег и он просит убрать один товар из корзины;");
                return false;
            }
        }

        public void ShowBasket()
        {
            for (int i = 0; i < _basket.Count; i++)
            {
                Console.WriteLine($"{_basket[i].Name} стоит {_basket[i].Cost}");
            }
            Console.WriteLine($"В корзине товара стоимостью {_costAllProducts}");
        }

        private void CreateBasket()
        {
            int randomProduct = 0;
            string nameProduct;

            for (int i = 0; i < _countProducts; i++)
            {
                int countProducts = Enum.GetValues(typeof(NameProduct)).Length;
                randomProduct = _random.Next(0, countProducts);
                nameProduct = Convert.ToString((NameProduct)randomProduct);
                _basket.Add(new Product(nameProduct, _random.Next(20, 101)));
                _costAllProducts += _basket[i].Cost;
            }
        }

        enum NameProduct
        {
            Milk,
            Bear,
            Eggs,
            Chicken,
            Bread
        }
    }

    class Product
    {
        public string Name { get; private set; }
        public int Cost { get; private set; }

        public Product(string name, int cost)
        {
            Name = name;
            Cost = cost;
        }
    }
}
