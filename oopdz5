using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp30
{
    class Program
    {
        static void Main(string[] args)
        {
            bool isWork = true;
            Stantion stantion = new Stantion();

            while (isWork)
            {
                stantion.ShowInfo();
                Console.WriteLine("\n\n1. Создать новое направление. \n2. Продать билеты. \n3. Сформировать поезд. \n4. Отправить поезд. \n5. Подождать 10 минут. \n6. Выход.");

                switch (Console.ReadLine())
                {
                    case "1":
                        stantion.CreateNewRailway();
                        break;
                    case "2":
                        stantion.SellTickits();
                        break;
                    case "3":
                        stantion.CreateNewTrain();
                        break;
                    case "4":
                        stantion.SendTrain();
                        break;
                    case "5":
                        stantion.SkipTime();
                        break;
                    case "6":
                        isWork = false;
                        break;
                    default:
                        break;
                }
                Console.Clear();
            }
        }
    }

    class Stantion
    {
        private List<Train> _trains;
        private List<Railway> _railways;
        private int _tickits;
        private bool _ticketSoldOut;
        private bool _trainCreated;
        private Random _random;

        public Stantion()
        {
            _trains = new List<Train>();
            _railways = new List<Railway>();
            _random = new Random();
            _ticketSoldOut = false;
            _trainCreated = false;
        }

        public void ShowInfo()
        {
            Console.WriteLine("Список поездов готовых к отправке: ");
            for (int i = 0; i < _trains.Count; i++)
            {
                Console.Write(i+1);
                _trains[i].ShowInfo();
            }
            Console.WriteLine("Список путей: ");
            foreach (var railway in _railways)
            {
                railway.ShowInfo();
            }
        }

        public void SkipTime()
        {
            foreach (var railway in _railways)
            {
                if(railway.TrainLeaving)
                railway.SkipTime();
            }
        }

        public void CreateNewRailway()
        {
            _railways.Add(new Railway());
            _railways.Last().CreateRailway();
        }

        public void CreateNewTrain()
        {
            if (_ticketSoldOut)
            {
                _trains.Add(new Train(_tickits));
                _trains.Last().CreateTrain();
                _ticketSoldOut = false;
                _trainCreated = false;
            }
            else
            {
                Console.WriteLine("Прежде чем сформировать поезд, необходимо продать билеты");
                Console.ReadKey();
            }
        }

        public void SellTickits()
        {
            if (_trainCreated != true)
            {
                _tickits = _random.Next(100, 301);
                _ticketSoldOut = true;
                Console.WriteLine($"Вы продали {_tickits} билетов" );
                _trainCreated = true;
            }
            else
                Console.WriteLine("Сначала сформируйте поезд для пассажиров, купивших билеты");
            Console.ReadKey();
        }

        public void SendTrain()
        {
            if (_railways.Count >0 && _trains.Count>0)
            {
                bool trainSending = false;
                while (trainSending != true)
                {
                    Console.Clear();
                    ShowInfo();
                    Console.WriteLine("Выберите номер поезда: ");
                    int numberTrain = Input()-1;
                    Console.WriteLine("Выберите номер пути: ");
                    int numberRailway = Input()-1;

                    if (_railways.ElementAt(numberRailway)!=null && _trains.ElementAt(numberTrain)!=null)
                    {
                        if (_railways.ElementAt(numberRailway).TrainLeaving != true)
                        {
                            _railways.ElementAt(numberRailway).SendTrain();
                            trainSending = true;
                            _trains.RemoveAt(numberTrain);
                        }
                        else
                            Console.WriteLine("Данный путь уже занят");
                    }
                    else
                        Console.WriteLine("Неправильно введены данные");
                }
            }
            else
                Console.WriteLine("Неудача! Проверьте наличие готовых поездов и путей");
        }

        private int Input()
        {

            string userInput = Console.ReadLine();
            bool successCount = int.TryParse(userInput, out int result);
            if (successCount)
                return result;
            else
            {
                Console.WriteLine("Неправильный ввод, попробуйте заново.");
                return 0;
            }
        }
    }

    class Train
    {
        private int _countTrainCar;
        private int _countPassenger;
        private int _countAllPlaces;
        private Random rand = new Random();

        public Train(int countPassenger)
        {
            _countPassenger = countPassenger;
        }

        public void ShowInfo()
        {
            Console.WriteLine($". Поезд с пассажирами {_countPassenger}");
        }

        public void CreateTrain()
        {
            bool trainCreated = false;
            while (trainCreated != true)
            {
                Console.Clear();
                Console.WriteLine($"Количество поссажиров - {_countPassenger} \nВ {_countTrainCar} вагонах есть место для {_countAllPlaces} пассажиров \n\n" +
                    $"1. Добавить новый вагон. \n2. Создать поезд.");

                switch (Input())
                {
                    case 1:
                        _countTrainCar += 1;
                        _countAllPlaces += rand.Next(50, 100);
                        break;
                    case 2:
                        if (_countPassenger>=_countAllPlaces&&_countPassenger!=0)
                        {
                            Console.WriteLine("Не всем людям хватило место, они в ярости! Поезд вернули, а вас ждет штраф!");
                            _countAllPlaces = 0;
                            _countTrainCar = 0;
                            Console.ReadKey();
                            trainCreated = true;
                        }
                        else
                        {
                            Console.WriteLine("Поезд создан");
                            Console.ReadKey();
                            trainCreated = true;
                        }
                        break;
                    default:
                        break;
                }
            }
        }

        private int Input()
        {
            string userInput = Console.ReadLine();
            bool successCount = int.TryParse(userInput, out int result);
            if (successCount)
                return result;
            else
            {
                Console.WriteLine("Неправильный ввод, попробуйте заново.");
                return 0;
            }
        }
    }

    class Railway
    {
        private List<string> _pointsWay;
        private int _timeToTravel;
        
        public bool TrainLeaving { get; private set; }
        public Railway()
        {
            _pointsWay = new List<string>();
            TrainLeaving = false;
            _timeToTravel = 0;
        }
        
        public void SendTrain()
        {
            TrainLeaving = true;
        }

        public void SkipTime()
        {
            if (_timeToTravel - 10 < 0)
            {
                _timeToTravel = 0;
                TrainLeaving = false;
            }
            else
                _timeToTravel -= 10;
        }

        public void CreateRailway()
        {
            Console.WriteLine("Введите точку отправления: ");
            string point1 = Console.ReadLine();
            Console.WriteLine("Введите точку прибытия: ");
            string point2 = Console.ReadLine();
            Console.WriteLine("Введите время в пути в цифрах");
            _timeToTravel = Input();
            _pointsWay.Add(point1);
            _pointsWay.Add(point2);
        }

        public void ShowInfo()
        {
            for (int i = 0; i < _pointsWay.Count; i+=2)
            {
                Console.Write(i+1 + ". ");
            }
            Console.Write($"Направление {_pointsWay.First()} - {_pointsWay.Last()}. Время в пути: ");
            if (TrainLeaving)
                Console.Write($"{_timeToTravel} \n");
            else
                Console.Write("Путь свободен.\n");
        }

        private int Input()
        {
            string userInput = Console.ReadLine();
            bool successCount = int.TryParse(userInput, out int result);
            if (successCount)
                return result;
            else
            {
                Console.WriteLine("Неправильный ввод, попробуйте заново.");
                return 0;
            }
        }
    }
}
