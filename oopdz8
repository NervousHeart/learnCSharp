
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp5
{
    class Program
    {
        static void Main(string[] args)
        {
            Battlefield battlefield = new Battlefield(5, 5);
            battlefield.ShowInfo();
            Console.ReadKey();

            while (battlefield.CanFight())
            {
                battlefield.Fight();
            }
        }
    }

    class Battlefield
    {
        private Squad _squad1;
        private Squad _squad2;
        private Random _random;

        public Battlefield(int countFightersTeam1, int countFightersTeam2)
        {
            _random = new Random();
            _squad1 = new Squad(countFightersTeam1, _random, "Левая");
            _squad2 = new Squad(countFightersTeam2, _random, "Правая");
        }

        public void ShowInfo()
        {
            _squad1.ShowInfo();
            _squad2.ShowInfo(Console.WindowWidth - 40);
        }

        public bool CanFight()
        {
            if (_squad1.CanFight && _squad2.CanFight)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public void Fight()
        {
            while (CanFight())
            {
                Console.Clear();
                ShowInfo();
                _squad1.Attack(_squad2);

                ShowInfo();
                _squad2.Attack(_squad1);
                ShowWinner();
            }
        }

        private void ShowWinner()
        {
            if (_squad1.CanFight != true)
            {
                Console.WriteLine("Команда 2 победила!");
            }
            else if (_squad2.CanFight != true)
            {
                Console.WriteLine("Команда 1 победила!");
            }
        }

    }

    class Squad
    {
        private List<Fighter> _fighters;
        private Random _random;

        public int CountFighters { get; private set; }
        public string Name { get; private set; }
        public bool CanFight { get; private set; }

        public Squad(int countFighters, Random random, string name)
        {
            _random = random;
            CountFighters = countFighters;
            _fighters = new List<Fighter>();
            CanFight = true;
            Name = name;
            Create();
        }

        public void Attack(Squad squad)
        {
            Console.WriteLine($"\n\n\nКоманда {Name} атакует");
            for (int i = 0; i < _fighters.Count; i++)
            {
                DeleteCorpse();
                squad.DeleteCorpse();
                if (i < squad.CountFighters)
                {
                    _fighters[SearchTarget()].TakeDamage(squad.Hit(i));
                }
            }
            if (IsMedicAlive())
            {
                int numberTarget = SearchWounded();
                (_fighters[GetNumberMedic()] as Medic).Hill(_fighters[numberTarget]);
            }
            CheckCanFight();
            Console.ReadKey();
            Console.Clear();
        }

        public void ShowInfo()
        {
            Console.WriteLine("Команда 1: ");
            foreach (var fighter in _fighters)
            {
                fighter.ShowInfo();
            }
        }

        public void ShowInfo(int left)
        {
            int top = 0;
            Console.SetCursorPosition(left, top++);
            Console.Write("Команда 2: ");
            for (int i = 0; i < _fighters.Count; i++)
            {
                Console.SetCursorPosition(left, top++);
                _fighters[i].ShowInfo();
            }
        }

        public int Hit(int numberFighter)
        {
            if (IsCommanderAlive())
                return _fighters[numberFighter].Damage + (_fighters[GetNumberCommander()] as Commander).AuraCommander;
            else
                return _fighters[numberFighter].Damage;
        }

        public void DeleteCorpse()
        {
            for (int i = 0; i < _fighters.Count; i++)
            {
                if (_fighters[i].Health <= 0)
                {
                    _fighters.RemoveAt(i);
                    i--;
                    CountFighters--;
                }
            }
        }

        private bool IsCommanderAlive()
        {
            foreach (var fighter in _fighters)
            {
                if (fighter is Commander)
                    return true;
            }
            return false;
        }

        private bool IsMedicAlive()
        {
            {
                foreach (var fighter in _fighters)
                {
                    if (fighter is Medic)
                        return true;
                }
                return false;
            }
        }

        private int GetNumberCommander()
        {
            for (int i = 0; i < _fighters.Count; i++)
            {
                if (_fighters[i] is Commander)
                    return i;
            }
            return 0;
        }

        private int GetNumberMedic()
        {
            {
                for (int i = 0; i < _fighters.Count; i++)
                {
                    if (_fighters[i] is Medic)
                        return i;
                }
                return 0;
            }
        }

        private int SearchTarget()
        {
            int numberTarget = _random.Next(0, _fighters.Count);
            return numberTarget;
        }

        private int SearchWounded()
        {
            for (int i = 0; i < _fighters.Count; i++)
            {
                if (_fighters[i].Health < _fighters[i].NativeHealth)
                {
                    return i;
                }
            }
            return 0;
        }

        private void CheckCanFight()
        {
            if (_fighters.Count==0)
            {
                Console.WriteLine($"Команда {Name} проиграла");
                CanFight = false;
            }
        }

        private void Create()
        {
            _fighters.Add(new Commander(GetName(), _random));
            _fighters.Add(new Medic(GetName(), _random));
            for (int i = 0; i < CountFighters - 2; i++)
            {
                _fighters.Add(new Fighter(GetName(), _random));
            }
        }

        private string GetName()
        {
            int countName = Enum.GetValues(typeof(NameSquad)).Length;
            string name = Convert.ToString((NameSquad)_random.Next(0, countName));
            return name;
        }
    }

    class Fighter
    {
        private Random _random;

        public int Damage { get; private set; }
        public string Name { get; private set; }
        public int Health { get; private set; }
        public int NativeHealth { get; private set; }

        public Fighter(string name, Random random)
        {
            Name = name;
            _random = random;
            Damage = _random.Next(20, 41);
            Health = _random.Next(100, 151);
            NativeHealth = Health;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"{Name}. HP: {Health}/{NativeHealth}. {GetPost()}.");
        }

        public void TakeDamage(int damage)
        {
            Console.WriteLine($"\n{Name} получает {Damage} урона.");
            Health -= damage;
        }

        public void TakeHeal(int heal)
        {
            Health += heal;
        }
        public virtual string GetPost()
        {
            return "Рядовой";
        }
    }

    class Commander : Fighter
    {
        private int _health;

        public int AuraCommander { get; private set; }

        public Commander(string name, Random random) : base(name, random)
        {
            _health = random.Next(75, 101);
            AuraCommander = random.Next(5, 21);
        }

        public override string GetPost()
        {
            return "Командир";
        }
    }

    class Medic : Fighter
    {
        private int _health;
        private int _hillPower;
        public Medic(string name, Random random) : base(name, random)
        {
            _health = random.Next(150, 201);
            _hillPower = random.Next(50, 76);
        }

        public void Hill(Fighter fighter)
        {
            if (fighter.Health + _hillPower > fighter.NativeHealth)
            {
                Console.WriteLine($"Медик лечит {fighter.Name} на {fighter.NativeHealth - fighter.Health}");
                fighter.TakeHeal(fighter.NativeHealth - fighter.Health);
            }
            else
            {
                Console.WriteLine($"Медик лечит {fighter.Name} на {_hillPower}");
                fighter.TakeHeal(_hillPower);
            }
        }

        public override string GetPost()
        {
            return "Медик";
        }
    }

    enum NameSquad
    {
        Ivan,
        Boris,
        Sergei,
        Alexei,
        Dmitrii,
        Max,
        Jorj,
        Harry,
        Patrick,
        Alex
    }
}
