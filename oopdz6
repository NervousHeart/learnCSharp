using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IJuniorDZ
{
    class Program
    {
        static void Main(string[] args)
        {
            bool isWork = true;
            List<Warrior> warriors = new List<Warrior> { new Archer("Арчер"), new Paladin("Паладин"), new Mage("Маг"), new Assasin("Ассасин"), new Berserk("Берсерк") };
            Arena arena = new Arena(warriors);

            while (isWork)
            {
                Console.Clear();
                Console.WriteLine("Вы на арене! \n1. Выбрать бойцов \n2. Начать бой \n3. Выход");

                switch (Console.ReadLine())
                {
                    case "1":
                        arena.SelectFighter();
                        break;
                    case "2":
                        if (arena.FightersChoisen)
                            arena.StartFight();
                        else
                            Console.WriteLine("Выберите сначала бойцов.");
                        break;
                    case "3":
                        isWork = false;
                        break;
                    default:
                        break;
                }
            }

        }
    }

    class Arena
    {
        private List<Warrior> _warriors;
        private Warrior _fighter1;
        private Warrior _fighter2;

        public bool FightersChoisen  { get; private set; }

        public Arena(List<Warrior> warriors)
        {
            _warriors = warriors;
            FightersChoisen = false;
            _fighter1 = null;
            _fighter2 = null;
        }

        public void StartFight()
        {
            Console.Clear();
            ShowInfo();
            Console.WriteLine("\n");
            while (_fighter1.Health > 0 && _fighter2.Health > 0)
            {
                _fighter1.Attack(_fighter2);
                _fighter1.ShowHealth();
                _fighter2.Attack(_fighter1);
                _fighter2.ShowHealth();
                Console.ReadKey();
            }
            if (_fighter1.Health <= 0)
            {
                Console.WriteLine($"Боец {_fighter1.Name} пал.");
                _warriors.Remove(_fighter1);
                _fighter2.GetHeal();
            }
            else
            {
                Console.WriteLine($"Боец {_fighter2.Name} пал.");
                _warriors.Remove(_fighter2);
                _fighter1.GetHeal();
            }
            Console.ReadKey();
        }

        public void SelectFighter()
        {
            FightersChoisen = false;
            while (!FightersChoisen)
            {
                Console.Clear();
                ShowAllFighters();
                Console.WriteLine("Введите номер бойца 1: ");
                _fighter1 = GetFighter(GetNumber());
                Console.WriteLine("Введите номер бойца 2: ");
                _fighter2 = GetFighter(GetNumber());
                ShowInfo();
                Console.ReadKey();
                if (_fighter1 != null && _fighter2 != null)
                    FightersChoisen = true;
                else
                    FightersChoisen = false;
            }
        }

        private void ShowInfo()
        {
            if (_fighter1 != null)
                Console.Write("Боец номер 1:" + _fighter1.Name);
            else
                Console.Write("Боец номер 1: не выбран");
            if (_fighter2 != null)
                Console.Write("\nБоец номер 2:" + _fighter2.Name);
            else
                Console.Write("\nБоец номер 2: не выбран");
        }

        private void ShowAllFighters()
        {
            for (int i = 0; i < _warriors.Count; i++)
            {
                Console.WriteLine(i + 1 + " - " + _warriors[i].Name); ;
            }
        }

        private Warrior GetFighter(int userInput)
        {
            if (userInput - 1 < _warriors.Count && userInput - 1 >= 0)
            {
                if (_warriors[userInput-1] != _fighter1)
                {
                    return _warriors[userInput - 1];
                }
                else
                {
                    Console.WriteLine("Такой боец уже выбран, попробуйте заново");
                    _fighter1 = null;
                    _fighter2 = null;
                    return null;
                }
            }
            else
            {
                Console.WriteLine("Бойца под таким номером нет");
                return null;
            }
        }

        private int GetNumber()
        {
            string userInput = Console.ReadLine();
            bool successCount = int.TryParse(userInput, out int result);
            if (successCount)
            {
                return result;
            }
            else
            {
                Console.WriteLine("Неправильный ввод, попробуйте заново.");
                return 0;
            }
        }
    }

    abstract class Warrior
    {
        private int _accuracy;
        private int _costSpell;
        private int _nativeHealth;
        private Random rand;

        public string Name { get; private set; }
        public int Damage { get; private set; }
        public int Health { get; private set; }
        public int Energy { get; private set; }

        public Warrior(string name, int accuracy, int health, int energy, int damage, int costSpell)
        {
            Name = name;
            _accuracy = accuracy;
            Health = health;
            Energy = energy;
            Damage = damage;
            _costSpell = costSpell;
            _nativeHealth = Health;
            rand = new Random();
        }

        public void Attack(Warrior opponent)
        {
            if (TryPunch() && TryUseEnergy())
            {
                if (TryPunch())
                    opponent.GetDamage(UseSpecialAbility());
                else
                    opponent.GetDamage(TakeDamage());
            }
            else if (TryPunch())
            {
                opponent.GetDamage(TakeDamage());
            }
            else
            {
                Console.Write($"{Name} промахивается");
            }

            Console.WriteLine();
        }

        public void GetHeal()
        {
            Health = _nativeHealth;
        }

        public void ShowHealth()
        {
            if (Health > _nativeHealth / 1.5)
                Console.WriteLine($"Боец {Name} выглядит здоровым\n");
            else if (Health > _nativeHealth / 2)
                Console.WriteLine($"Боец {Name} ранен\n");
            else if (Health > _nativeHealth / 5)
                Console.WriteLine($"{Name} при смерти\n");
        }

        public virtual int TakeDamage()
        {
            Console.Write($"{Name} бьет противника");
            return Damage;
        }

        public virtual void GetDamage(int damage)
        {
            Health -= damage;
        }

        public virtual int UseSpecialAbility()
        {
            return Damage * 2;
        }

        private bool TryPunch()
        {
            if (_accuracy * rand.Next(7, 21) > 60)
                return true;
            else
                return false;
        }

        private bool TryUseEnergy()
        {
            if (Energy >= _costSpell)
                return true;
            else
                return false;
        }
    }

    class Mage : Warrior
    {
        public Mage(string name) : base(name, 5, 500, 500, 45, 150) { }

        public override int UseSpecialAbility()
        {
            Console.Write("Маг кастует огнненный шар");
            return base.Damage * 6;
        }
    }

    class Paladin : Warrior
    {
        private int _armor;

        public Paladin(string name) : base(name, 6, 1000, 300, 100, 100) { int _armor = 30; }

        public override void GetDamage(int damage)
        {
            base.GetDamage(damage - _armor); ;
        }

        public override int UseSpecialAbility()
        {
            Console.Write("Паладин молится и восстанавливает себе здоровье");
            GetDamage(-base.Damage);
            return 0;
        }
    }

    class Archer : Warrior
    {
        public Archer(string name) : base(name, 7, 600, 400, 70, 100) { }

        public override int UseSpecialAbility()
        {
            Console.Write("Лучник выпускает сразу три стрелы");
            return base.Damage * 3;
        }
    }

    class Assasin : Warrior
    {
        public Assasin(string name) : base(name, 8, 500, 600, 90, 150) { }

        public override int UseSpecialAbility()
        {
            Console.Write("Асасин оказыввается за спиной противника и наносит точный удар");
            return base.Damage * 3;
        }
    }

    class Berserk : Warrior
    {
        private bool inRage = false;

        public Berserk(string name) : base(name, 5, 1200, 250, 110, 50) { }

        public override int UseSpecialAbility()
        {
            Console.Write("Варвар жертвует своим здоровьем в обмен на увеличение урона");
            GetDamage(base.Damage);
            inRage = true;
            return base.Damage;
        }

        public override int TakeDamage()
        {
            if (inRage)
            {
                inRage = false;
                return base.TakeDamage() + this.Damage;
            }
            else
            {
                return base.TakeDamage();
            }
        }
    }
}
