using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp5
{

    //У вас есть автосервис, в который приезжают люди, чтобы починить свои автомобили.
    //У вашего автосервиса есть баланс денег и склад деталей.
    //Когда приезжает автомобиль, у него сразу ясна его поломка, и эта поломка отображается у вас в консоли вместе с ценой за починку(цена за починку складывается из цены детали + цена за работу).
    //Поломка всегда чинится заменой детали, но количество деталей ограничено тем, что находится на вашем складе деталей.
    //Если у вас нет нужной детали на складе, то вы можете отказать клиенту, и в этом случае вам придется выплатить штраф.
    //Если вы замените не ту деталь, то вам придется возместить ущерб клиенту.
    //За каждую удачную починку вы получаете выплату за ремонт, которая указана в чек-листе починки.
    class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            Storage storage = new Storage();
            CarServise carServise = new CarServise(storage);
            Shop shop = new Shop(random);
            bool isWork = true;

            while (isWork)
            {

                Console.Clear();
                Console.WriteLine($"Автосервис \"Раз-два и готово\" готов принимать клиентов. Касса сервиса: {carServise.Money}\nТекущий клиент:");
                carServise.ShowBreakDown();
                Console.WriteLine($"\n1. Запустить клиента. \n2. Заменить деталь. \n3. Проверить склад. \n4. Купить новую деталь. \n5. Выход.");

                switch (Console.ReadLine())
                {
                    case "1":
                        carServise.InviteClient();
                        break;
                    case "2":
                        break;
                    case "3":
                        carServise.ShowDetailsInStorage();
                        break;
                    case "4":
                        shop.MakeDeal(carServise, storage);
                        break;
                    case "5":
                        isWork = false;
                        break;
                    default:
                        break;
                }
                Console.ReadKey();
            }


        }
    }

    class CarServise
    {
        private int _penalty;
        private int _priceOfWork;
        private int _totalPrice;
        private bool _haveClient;
        private Random _random;
        private List<Client> _clients;
        private Storage _storage;

        public int Money { get; private set; }

        public CarServise(Storage storage)
        {
            _random = new Random();
            _storage = storage;
            _priceOfWork = _random.Next(100,401);
            _haveClient = false;
            Money = 2000;
            
            _clients = new List<Client>();
        }

        public void InviteClient()
        {
            if (_clients.Count > 0)
            {
                Console.WriteLine("Обслужите сначала первого клиента");
            }
            else
            {
                _clients.Add(new Client(_random));
                _haveClient = true;
            }
        }

        public void ShowDetailsInStorage()
        {
            Console.WriteLine("На складе лежат: ");
            _storage.ShowAllDetails();
            Console.ReadKey();
        }

        public void ChangeDetail()
        {
            int numberDetail = GetNumber() - 1;
        }

        public void ShowBreakDown()
        {
            if (_haveClient)
                _clients.Last().ShowInfo();
            else
                Console.WriteLine("Сначала запустите клиента");
        }

        public int PayForDetail(int price)
        {
            Money -= price;
            return price;
        }

        private void PayPenalty()
        {
            Money -= _penalty;
        }

        private void PayPenalty(Client client)
        {
            client.ReceiveCompensation(_totalPrice);
            Money -= _totalPrice;
        }
        private int GetNumber()
        {
            string userInput = Console.ReadLine();
            bool successCount = int.TryParse(userInput, out int result);
            if (successCount)
            {
                return result;
            }
            else
            {
                Console.WriteLine("Неправильный ввод, попробуйте заново.");
                return 0;
            }
        }

    }

    class Storage
    {
        private List<Details> _details;
        private Random _random;

        public Storage()
        {
            _random = new Random();
            _details = new List<Details>();
        }


        public Details GetDetail(int number)
        {
            return _details.ElementAt(number);
        }

        public void AddDetail(int number, int cost)
        {
            _details.Add(new Details(number, cost)) ;
        }

        public void ShowAllDetails()
        {
            for (int i = 0; i < _details.Count; i++)
            {
                Console.Write(i + 1 + ". ");
                _details[i].ShowInfo();
            }
        }
        private void RemoveDetail(int number)
        {
            _details.RemoveAt(number);
        }
    }

    class Shop
    {
        private List<Details> _details;
        private int _money;
        private Random _random;

        public Shop(Random random)
        {
            _random = random;
            _details = new List<Details>();
            FillTheShop();
        }

        public void MakeDeal(CarServise carServise, Storage storage)
        {
            ShowAssortment();
            Console.WriteLine("Введите номер детали: ");
            int numberDetail = GetNumber()-1;
            if (CheckSolvency(carServise, numberDetail))
            {
                Console.WriteLine("поздравляю с покупкой!");
                _money += carServise.PayForDetail(_details[numberDetail].Cost);
                storage.AddDetail(numberDetail, _details[numberDetail].Cost);
            }
            else
            {
                Console.WriteLine("Неудалось купить деталь");
            }
        }

        private bool CheckSolvency(CarServise carServise, int numberDetail)
        {
            if (numberDetail >= 0 && numberDetail < Enum.GetValues(typeof(NameDetails)).Length)
            {
                if (carServise.Money >= _details[numberDetail].Cost)
                    return true;
                else
                    return false;
            }
            else
            {
                return false;
            }
        }

        private void ShowAssortment()
        {
            foreach (var detail in _details)
            {
                detail.ShowInfo();
            }
        }

        private void FillTheShop()
        {
            int countName = Enum.GetValues(typeof(NameDetails)).Length;
            for (int i = 0; i < countName; i++)
            {
                _details.Add(new Details(i, _random.Next(300, 601)));
            }
        }

        private int GetNumber()
        {
            string userInput = Console.ReadLine();
            bool successCount = int.TryParse(userInput, out int result);
            if (successCount)
            {
                return result;
            }
            else
            {
                Console.WriteLine("Неправильный ввод, попробуйте заново.");
                return 0;
            }
        }

    }

    class Details
    {
        private string _name;
        private int _number;

        public bool IsBroken { get; private set; }
        public int Cost { get; private set; }

        public Details(int numberDetail, int cost)
        {
            IsBroken = false;
            Cost = cost;
            _number = numberDetail;
            _name = GetName(numberDetail);
        }

        public Details (int numberDetail)
        {
            IsBroken = false;
            _name = GetName(numberDetail);
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Деталь номер {_number+1}: {_name} стоимостью: {Cost}");
        }

        public void BrokeDetail()
        {
            IsBroken = true;
        }

        private string GetName(int number)
        {
            return Convert.ToString((NameDetails)number);
        }
    }

    class Client
    {
        private int _money;
        private int _numberBrokenDetail;
        private List<Details> _car;

        public Client(Random random)
        {
            _money = 1000;
            _car = new List<Details>();
            CreateCar(random);
        }

        public void ReplacementDetail(int numberDetail, Details detail)
        {
            if (numberDetail>=0 && numberDetail<Enum.GetValues(typeof(NameDetails)).Length)
            {
                _car.Insert(numberDetail,detail);
                if (_car.ElementAt(_numberBrokenDetail).IsBroken)
                {
                    Console.WriteLine("Вы заменили не ту деталь. Клиент в ярости, а вы со штрафом!");
                }
                else
                {
                    Console.WriteLine("Клиент уехал довольный! Хорошая работа!");
                }
            }
            else
            {
                Console.WriteLine("Такой детали нет в машине");
            }
        }

        public void ReceiveCompensation(int money)
        {
            _money += money;
        }

        public int Pay(int cost)
        {
            _money -= cost;
            return cost;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Клиент привез свою машину и говорит что у него сломано деталь номер: {_numberBrokenDetail+1} - {Convert.ToString((NameDetails)_numberBrokenDetail)}");
        }

        private void CreateCar(Random random)
        {
            int countName = Enum.GetValues(typeof(NameDetails)).Length;
            for (int i = 0; i < countName; i++)
            {
                _car.Add(new Details(i));
            }
            _numberBrokenDetail = random.Next(0, countName);
            _car.ElementAt(_numberBrokenDetail).BrokeDetail();
        }
    }

    enum NameDetails
    {
        Двигатель,
        Корпус,
        Трансмиссия,
        Фары,
        Тормоза
    }
}
