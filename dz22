using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace dzIJuniorMap
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Введите ширину карты");
            int weightMap = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine("Введите высоту карты");
            int heightMap = Convert.ToInt32(Console.ReadLine());
            char[,] map = CreateMap(weightMap, heightMap);
            Console.CursorVisible = false;
            Console.Clear();
            DrawMap(map);
            PlayGame(map);
        }

        static char[,] CreateMap(int weight, int height)
        {
            bool setPlayer = false;
            Random rand = new Random();
            char[,] map = new char[height, weight];
            int minDifficult = weight * height - weight - height;
            int maxdifficult = weight * height*2;

            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    map[0, j] = '#';
                    map[map.GetLength(0) - 1, j] = '#';
                    map[i, 0] = '#';
                    map[i, map.GetLength(1) - 1] = '#';
                }
            }

            for (int i = 1; i < map.GetLength(0); i++)
            {
                for (int j = 1; j < map.GetLength(1); j++)
                {
                    int countObstacles = rand.Next(minDifficult,maxdifficult);
                    int presenseObstacle =rand.Next(0,4);
                    if (presenseObstacle==0&&countObstacles>0)
                    {
                        map[i, j] = '#';
                        countObstacles--;
                    }
                }
            }

            for (int i = 1; i < map.GetLength(0); i++)
            {
                for (int j = 1; j < map.GetLength(1); j++)
                {
                    if (map[i, j] != '#' && setPlayer == false)
                    {
                        map[i, j] = 'A';
                        setPlayer = true;
                    }
                }
            }

            return map;
            
        }
        static void DrawMap(char[,] map)
        {
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    Console.Write(map[i, j]);
                }
                Console.WriteLine();
            }
        }
        static void Move(ConsoleKeyInfo key, char[,] map, ref int playerX, ref int playerY)
        {

            int playerDX=1, playerDY=0;

            switch (key.Key)
            {

                case ConsoleKey.UpArrow:
                    playerDX = 0; playerDY = -1;
                    break;
                case ConsoleKey.DownArrow:
                    playerDX = 0; playerDY = 1;
                    break;
                case ConsoleKey.RightArrow:
                    playerDY = 0; playerDX = 1;
                    break;
                case ConsoleKey.LeftArrow:
                    playerDY = 0; playerDX = -1;
                    break;
            }

            if (map[playerY + playerDY, playerX+playerDX] != '#')
            {
                Console.SetCursorPosition(playerX, playerY);
                Console.Write(' ');

                playerY += playerDY;
                playerX += playerDX;

                Console.SetCursorPosition(playerX, playerY);
                Console.Write('A');
            }
        }
        static void PlayGame(char[,] map)
        {
            bool isPlaying = true;
            int playerX = 0;
            int playerY = 0;
            for (int i = 0; i < map.GetLength(0); i++)
            {
                for (int j = 0; j < map.GetLength(1); j++)
                {
                    if (map[i, j] == 'A')
                    {
                        playerX = i;
                        playerY = j;
                    }
                }
            }



            while (isPlaying)
            {
                Move(Console.ReadKey(true),map, ref playerX, ref playerY);
            }


        }

    }
}
