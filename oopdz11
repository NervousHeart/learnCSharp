using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp5
{
    class Program
    {
        static void Main(string[] args)
        {
            CarServise carServise = new CarServise();
            bool isWork = true;

            while (isWork)
            {
                Console.Clear();
                Console.WriteLine($"Автосервис \"Раз-два и готово\" готов принимать клиентов. Касса сервиса: {carServise.Money}\nТекущий клиент:");
                carServise.ShowClientInfo();
                Console.WriteLine($"\n\n1. Запустить клиента. \n2. Заменить деталь. \n3. Проверить склад. \n4. Купить новую деталь. \n5. Выход.");

                switch (Console.ReadLine())
                {
                    case "1":
                        carServise.InviteClient();
                        break;
                    case "2":
                        if (carServise.HaveClient)
                            carServise.RepairCarClient();
                        else
                            Console.WriteLine("");
                        break;
                    case "3":
                        carServise.ShowStorage();
                        break;
                    case "4":
                        if (carServise.HaveClient)
                            Console.WriteLine("Вас ждет клиент, вы не можете отойти в магазин");
                        else
                            carServise.BuyDetail();
                        break;
                    case "5":
                        isWork = false;
                        break;
                    default:
                        break;
                }
                Console.ReadKey();
            }
        }
    }

    class CarServise
    {
        private List<Detail> _details;
        private Client _client;
        private Shop _shop;
        private Random _random;
        private int _totalPrice;
        private int _penalty;
        private int _priceOfWork;

        public bool HaveClient { get; private set; }
        public int Money { get; private set; }

        public CarServise()
        {
            _details = new List<Detail>();
            _random = new Random();
            _shop = new Shop(_random);
            _penalty = 200;
            HaveClient = false;
            Money = 3000;
        }

        public void RepairCarClient()
        {
            if (HaveDetailForReplace())
            {
                Console.WriteLine("Введите номер детали, которую собираетесь заменить: ");
                int numberDetail = GetNumber() - 1;
                _client.ReplaceDetail(numberDetail, _details[numberDetail]);
                _details.RemoveAt(numberDetail);
                if (_client.Diagnostics())
                {
                    Console.WriteLine("Вы заменили не ту деталь! Вам пришлось выплатить компенсацию клиенту.");
                    _client.ReceiveCompensation(Pay(_totalPrice));
                    _client = null;
                    HaveClient = false;
                }
                else
                {
                    Console.WriteLine("Вы удачно заменили деталь. Клиент отдал деньги и уехал счастливый.");
                    Money += _client.Pay(_totalPrice);
                    _client = null;
                    HaveClient = false;
                }
            }
            else
            {
                Console.WriteLine($"У вас на складе нет подходящей детали. Клиент разочаровался и ушел, а вам выставили штраф {_penalty}");
                Pay(_penalty);
                _client = null;
                HaveClient = false;
            }
        }

        public void InviteClient()
        {
            if (_client == null)
            {
                _client = new Client(_random);
                _priceOfWork = _random.Next(100, 301);
                _totalPrice = _shop.GetPriceDetail(_client.NumberBrokenDetail) + _priceOfWork;
                HaveClient = true;
            }
            else
            {
                Console.WriteLine("У вас уже есть клиент, обслужите сначала его");
            }
        }

        public void ShowClientInfo()
        {
            if (_client != null)
            {
                _client.ShowBrokenDetail();
                Console.Write(" Стоимость: " + _totalPrice);
            }
            else
            {
                Console.WriteLine("Автосервис готов принять нового клиента");
            }
        }

        public void BuyDetail()
        {
            _shop.ShowAssortment();
            Console.WriteLine("Введите номер детали: ");
            int numberDetail = GetNumber() - 1;
            if (numberDetail >= 0 && numberDetail < Enum.GetValues(typeof(NameDetails)).Length)
            {
                if (_shop.GetPriceDetail(numberDetail) <= Money)
                {
                    AddDetail(numberDetail);
                    _shop.GetMoney(Pay(_shop.GetPriceDetail(numberDetail)));
                    Console.WriteLine("Спасибо за покупку");
                }
                else
                {
                    Console.WriteLine("У вас не хватает денег");
                }
            }
            else
            {
                Console.WriteLine("Детали под таким номером нет");
            }
        }

        public void ShowStorage()
        {
            Console.WriteLine("На складе: ");
            foreach (var detail in _details)
            {
                Console.WriteLine(detail.ShowInfo());
            }
        }

        private int GetNumber()
        {
            string userInput = Console.ReadLine();
            bool successCount = int.TryParse(userInput, out int result);
            if (successCount)
            {
                return result;
            }
            else
            {
                Console.WriteLine("Неправильный ввод, попробуйте заново.");
                return 0;
            }
        }

        private int Pay(int money)
        {
            Money -= money;
            return money;
        }

        private void AddDetail(int number)
        {
            _details.Add(new Detail(number));
        }

        private bool HaveDetailForReplace()
        {
            for (int i = 0; i < _details.Count; i++)
            {
                if (_client.NumberBrokenDetail == _details[i].Number)
                    return true;
            }
            return false;
        }
    }

    class Shop
    {
        private List<Detail> _details;
        private Random _random;
        private int _money;

        public Shop(Random random)
        {
            _details = new List<Detail>();
            _random = random;
            _money = 0;
            FillShop();
        }

        public void GetMoney(int money)
        {
            _money += money;
        }

        public void ShowAssortment()
        {
            Console.WriteLine("Касса магазина: " + _money);
            for (int i = 0; i < _details.Count; i++)
            {
                Console.WriteLine(_details[i].ShowInfo() + " Стоимость: " + _details[i].Cost);
            }
        }

        public int GetPriceDetail(int number)
        {
            return _details.ElementAtOrDefault(number).Cost;
        }

        private void FillShop()
        {
            int countNameDetails = Enum.GetValues(typeof(NameDetails)).Length;
            for (int i = 0; i < countNameDetails; i++)
            {
                _details.Add(new Detail(i, _random));
            }
        }
    }

    class Detail
    {
        private string _name;
        private Random _random;

        public int Number { get; private set; }
        public int Cost { get; private set; }
        public bool IsBroken { get; private set; }

        public Detail(int number, Random random)
        {
            _random = random;
            Number = number;
            _name = GetName();
            IsBroken = false;
            Cost = _random.Next(400, 701);
        }

        public Detail(int number)
        {
            Number = number;
            _name = GetName();
            IsBroken = false;
        }

        public string ShowInfo()
        {
            return $"Деталь номер {Number + 1}: {_name}.";
        }

        public void Broken()
        {
            IsBroken = true;
        }

        private string GetName()
        {
            int countNameDetails = Enum.GetValues(typeof(NameDetails)).Length;
            for (int i = 0; i < countNameDetails; i++)
            {
                if (Number == i)
                {
                    return Convert.ToString((NameDetails)Number);
                }
            }
            return null;
        }

    }

    class Client
    {
        private List<Detail> _car;
        private int _money;
        private Random _random;

        public int NumberBrokenDetail  {get; private set; }

        public Client(Random random)
        {
            _money = 1000;
            _car = new List<Detail>();
            _random = random;
            CreateCar();
        }

        public bool Diagnostics()
        {
            for (int i = 0; i < _car.Count; i++)
            {
                if (_car[i].IsBroken)
                    return false;
            }
            return true;
        }

        public int Pay(int money)
        {
            _money -= money;
            return money;
        }

        public void ReceiveCompensation(int money)
        {
            _money += money;
        }

        public void ReplaceDetail(int number, Detail detail)
        {
            _car.RemoveAt(number);
            _car.Insert(number, detail);
        }

        public void ShowBrokenDetail()
        {
            Console.WriteLine($"Клиент жалуется, что у него не работает {_car[NumberBrokenDetail].ShowInfo()}");
        }

        private void CreateCar()
        {
            int countNameDetails = Enum.GetValues(typeof(NameDetails)).Length;
            for (int i = 0; i < countNameDetails; i++)
            {
                _car.Add(new Detail(i));
            }
            int numberBrokenDetail = _random.Next(0, countNameDetails);
            _car[numberBrokenDetail].Broken();
        }
    }

    enum NameDetails
    {
        Двигатель,
        Корпус,
        Трансмиссия,
        Фары,
        Тормоза
    }
}
